{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fswiss\fcharset0 Arial;}}
{\*\generator Msftedit 5.41.15.1507;}\viewkind4\uc1\pard\f0\fs20 SSHD(8)                   BSD System Manager's Manual                  SSHD(8)\par
\par
NAME\par
     sshd - OpenSSH SSH daemon\par
\par
SYNOPSIS\par
     sshd [-46Ddeiqt] [-b bits] [-f config_file] [-g login_grace_time] [-h host_key_file] [-k key_gen_time]\par
          [-o option] [-p port] [-u len]\par
\par
DESCRIPTION\par
     sshd (SSH Daemon) is the daemon program for ssh(1).  Together these programs replace rlogin and rsh,\par
     and provide secure encrypted communications between two untrusted hosts over an insecure network.  The\par
     programs are intended to be as easy to install and use as possible.\par
\par
     sshd is the daemon that listens for connections from clients.  It is normally started at boot from\par
     /etc/rc.  It forks a new daemon for each incoming connection.  The forked daemons handle key exchange,\par
     encryption, authentication, command execution, and data exchange.  This implementation of sshd supports\par
     both SSH protocol version 1 and 2 simultaneously.  sshd works as follows:\par
\par
   SSH protocol version 1\par
     Each host has a host-specific RSA key (normally 1024 bits) used to identify the host.  Additionally,\par
     when the daemon starts, it generates a server RSA key (normally 768 bits).  This key is normally regen-\par
     erated every hour if it has been used, and is never stored on disk.\par
\par
     Whenever a client connects, the daemon responds with its public host and server keys.  The client com-\par
     pares the RSA host key against its own database to verify that it has not changed.  The client then\par
     generates a 256-bit random number.  It encrypts this random number using both the host key and the\par
     server key, and sends the encrypted number to the server.  Both sides then use this random number as a\par
     session key which is used to encrypt all further communications in the session.  The rest of the ses-\par
     sion is encrypted using a conventional cipher, currently Blowfish or 3DES, with 3DES being used by\par
     default.  The client selects the encryption algorithm to use from those offered by the server.\par
\par
     Next, the server and the client enter an authentication dialog.  The client tries to authenticate\par
     itself using .rhosts authentication combined with RSA host authentication, RSA challenge-response\par
     authentication, or password based authentication.\par
\par
     Regardless of the authentication type, the account is checked to ensure that it is accessible.  An\par
     account is not accessible if it is locked, listed in DenyUsers or its group is listed in DenyGroups .\par
     The definition of a locked account is system dependant. Some platforms have their own account database\par
     (eg AIX) and some modify the passwd field ( `*LK*' on Solaris, `*' on HP-UX, containing `Nologin' on\par
     Tru64 and a leading `!!' on Linux).  If there is a requirement to disable password authentication for\par
     the account while allowing still public-key, then the passwd field should be set to something other\par
     than these values (eg `NP' or `*NP*' ).\par
\par
     rshd, rlogind, and rexecd are disabled (thus completely disabling rlogin and rsh into the machine).\par
 SSH protocol version 2\par
   Version 2 works similarly: Each host has a host-specific key (RSA or DSA) used to identify the host.\par
   However, when the daemon starts, it does not generate a server key.  Forward security is provided\par
   through a Diffie-Hellman key agreement.  This key agreement results in a shared session key.\par
\par
   The rest of the session is encrypted using a symmetric cipher, currently 128-bit AES, Blowfish, 3DES,\par
   CAST128, Arcfour, 192-bit AES, or 256-bit AES.  The client selects the encryption algorithm to use from\par
   those offered by the server.  Additionally, session integrity is provided through a cryptographic mes-\par
   sage authentication code (hmac-sha1 or hmac-md5).\par
\par
   Protocol version 2 provides a public key based user (PubkeyAuthentication) or client host (HostbasedAu-\par
   thentication) authentication method, conventional password authentication and challenge response based\par
   methods.\par
\par
 Command execution and data forwarding\par
   If the client successfully authenticates itself, a dialog for preparing the session is entered.  At\par
   this time the client may request things like allocating a pseudo-tty, forwarding X11 connections, for-\par
   warding TCP/IP connections, or forwarding the authentication agent connection over the secure channel.\par
\par
   Finally, the client either requests a shell or execution of a command.  The sides then enter session\par
   mode.  In this mode, either side may send data at any time, and such data is forwarded to/from the\par
   shell or command on the server side, and the user terminal in the client side.\par
\par
   When the user program terminates and all forwarded X11 and other connections have been closed, the\par
   server sends command exit status to the client, and both sides exit.\par
\par
   sshd can be configured using command-line options or a configuration file (by default sshd_config(5)).\par
   Command-line options override values specified in the configuration file.\par
\par
   sshd rereads its configuration file when it receives a hangup signal, SIGHUP, by executing itself with\par
   the name and options it was started with, e.g., /usr/sbin/sshd.\par
\par
   The options are as follows:\par
\par
   -4      Forces sshd to use IPv4 addresses only.\par
\par
   -6      Forces sshd to use IPv6 addresses only.\par
\par
   -b bits\par
           Specifies the number of bits in the ephemeral protocol version 1 server key (default 768).\par
\par
   -D      When this option is specified, sshd will not detach and does not become a daemon.  This allows\par
           easy monitoring of sshd.\par
\par
   -d      Debug mode.  The server sends verbose debug output to the system log, and does not put itself\par
           in the background.  The server also will not fork and will only process one connection.  This\par
          option is only intended for debugging for the server.  Multiple -d options increase the debug-\par
          ging level.  Maximum is 3.\par
\par
  -e      When this option is specified, sshd will send the output to the standard error instead of the\par
          system log.\par
\par
  -f configuration_file\par
          Specifies the name of the configuration file.  The default is /etc/sshd_config.  sshd refuses\par
          to start if there is no configuration file.\par
\par
  -g login_grace_time\par
          Gives the grace time for clients to authenticate themselves (default 120 seconds).  If the\par
          client fails to authenticate the user within this many seconds, the server disconnects and\par
          exits.  A value of zero indicates no limit.\par
\par
  -h host_key_file\par
          Specifies a file from which a host key is read.  This option must be given if sshd is not run\par
          as root (as the normal host key files are normally not readable by anyone but root).  The\par
          default is /etc/ssh_host_key for protocol version 1, and /etc/ssh_host_rsa_key and\par
          /etc/ssh_host_dsa_key for protocol version 2.  It is possible to have multiple host key files\par
          for the different protocol versions and host key algorithms.\par
\par
  -i      Specifies that sshd is being run from inetd(8).  sshd is normally not run from inetd because it\par
          needs to generate the server key before it can respond to the client, and this may take tens of\par
          seconds.  Clients would have to wait too long if the key was regenerated every time.  However,\par
          with small key sizes (e.g., 512) using sshd from inetd may be feasible.\par
\par
  -k key_gen_time\par
          Specifies how often the ephemeral protocol version 1 server key is regenerated (default 3600\par
          seconds, or one hour).  The motivation for regenerating the key fairly often is that the key is\par
          not stored anywhere, and after about an hour it becomes impossible to recover the key for\par
          decrypting intercepted communications even if the machine is cracked into or physically seized.\par
          A value of zero indicates that the key will never be regenerated.\par
\par
  -o option\par
          Can be used to give options in the format used in the configuration file.  This is useful for\par
          specifying options for which there is no separate command-line flag.  For full details of the\par
          options, and their values, see sshd_config(5).\par
\par
  -p port\par
          Specifies the port on which the server listens for connections (default 22).  Multiple port\par
          options are permitted.  Ports specified in the configuration file are ignored when a command-\par
          line port is specified.\par
\par
  -q      Quiet mode.  Nothing is sent to the system log.  Normally the beginning, authentication, and\par
          termination of each connection is logged.\par
\par
     -t      Test mode.  Only check the validity of the configuration file and sanity of the keys.  This is\par
             useful for updating sshd reliably as configuration options may change.\par
\par
     -u len  This option is used to specify the size of the field in the utmp structure that holds the\par
             remote host name.  If the resolved host name is longer than len, the dotted decimal value will\par
             be used instead.  This allows hosts with very long host names that overflow this field to still\par
             be uniquely identified.  Specifying -u0 indicates that only dotted decimal addresses should be\par
             put into the utmp file.  -u0 may also be used to prevent sshd from making DNS requests unless\par
             the authentication mechanism or configuration requires it.  Authentication mechanisms that may\par
             require DNS include RhostsRSAAuthentication, HostbasedAuthentication and using a\par
             from="pattern-list" option in a key file.  Configuration options that require DNS include using\par
             a USER@HOST pattern in AllowUsers or DenyUsers.\par
\par
CONFIGURATION FILE\par
     sshd reads configuration data from /etc/sshd_config (or the file specified with -f on the command\par
     line).  The file format and configuration options are described in sshd_config(5).\par
\par
LOGIN PROCESS\par
     When a user successfully logs in, sshd does the following:\par
\par
           1.   If the login is on a tty, and no command has been specified, prints last login time and\par
                /etc/motd (unless prevented in the configuration file or by $HOME/.hushlogin; see the FILES\par
                section).\par
\par
           2.   If the login is on a tty, records login time.\par
\par
           3.   Checks /etc/nologin; if it exists, prints contents and quits (unless root).\par
\par
           4.   Changes to run with normal user privileges.\par
\par
           5.   Sets up basic environment.\par
\par
           6.   Reads the file $HOME/.ssh/environment, if it exists, and users are allowed to change their\par
                environment.  See the PermitUserEnvironment option in sshd_config(5).\par
\par
           7.   Changes to user's home directory.\par
\par
           8.   If $HOME/.ssh/rc exists, runs it; else if /etc/ssh/sshrc exists, runs it; otherwise runs\par
                xauth.  The ``rc'' files are given the X11 authentication protocol and cookie in standard\par
                input.\par
\par
           9.   Runs user's shell or command.\par
\par
AUTHORIZED_KEYS FILE FORMAT\par
     $HOME/.ssh/authorized_keys is the default file that lists the public keys that are permitted for RSA\par
 authentication in protocol version 1 and for public key authentication (PubkeyAuthentication) in proto-\par
 col version 2.  AuthorizedKeysFile may be used to specify an alternative file.\par
\par
 Each line of the file contains one key (empty lines and lines starting with a `#' are ignored as com-\par
 ments).  Each RSA public key consists of the following fields, separated by spaces: options, bits,\par
 exponent, modulus, comment.  Each protocol version 2 public key consists of: options, keytype, base64\par
 encoded key, comment.  The options field is optional; its presence is determined by whether the line\par
 starts with a number or not (the options field never starts with a number).  The bits, exponent, modu-\par
 lus and comment fields give the RSA key for protocol version 1; the comment field is not used for any-\par
 thing (but may be convenient for the user to identify the key).  For protocol version 2 the keytype is\par
 ``ssh-dss'' or ``ssh-rsa''.\par
\par
 Note that lines in this file are usually several hundred bytes long (because of the size of the public\par
 key encoding) up to a limit of 8 kilobytes, which permits DSA keys up to 8 kilobits and RSA keys up to\par
 16 kilobits.  You don't want to type them in; instead, copy the identity.pub, id_dsa.pub or the\par
 id_rsa.pub file and edit it.\par
\par
 sshd enforces a minimum RSA key modulus size for protocol 1 and protocol 2 keys of 768 bits.\par
\par
 The options (if present) consist of comma-separated option specifications.  No spaces are permitted,\par
 except within double quotes.  The following option specifications are supported (note that option key-\par
 words are case-insensitive):\par
\par
 from="pattern-list"\par
         Specifies that in addition to public key authentication, the canonical name of the remote host\par
         must be present in the comma-separated list of patterns (`*' and `?' serve as wildcards).  The\par
         list may also contain patterns negated by prefixing them with `!'; if the canonical host name\par
         matches a negated pattern, the key is not accepted.  The purpose of this option is to option-\par
         ally increase security: public key authentication by itself does not trust the network or name\par
         servers or anything (but the key); however, if somebody somehow steals the key, the key permits\par
         an intruder to log in from anywhere in the world.  This additional option makes using a stolen\par
         key more difficult (name servers and/or routers would have to be compromised in addition to\par
         just the key).\par
\par
 command="command"\par
         Specifies that the command is executed whenever this key is used for authentication.  The com-\par
         mand supplied by the user (if any) is ignored.  The command is run on a pty if the client\par
         requests a pty; otherwise it is run without a tty.  If an 8-bit clean channel is required, one\par
         must not request a pty or should specify no-pty.  A quote may be included in the command by\par
         quoting it with a backslash.  This option might be useful to restrict certain public keys to\par
         perform just a specific operation.  An example might be a key that permits remote backups but\par
         nothing else.  Note that the client may specify TCP/IP and/or X11 forwarding unless they are\par
         explicitly prohibited.  Note that this option applies to shell, command or subsystem execution.\par
\par
 environment="NAME=value"\par
         Specifies that the string is to be added to the environment when logging in using this key.\par
             Environment variables set this way override other default environment values.  Multiple options\par
             of this type are permitted.  Environment processing is disabled by default and is controlled\par
             via the PermitUserEnvironment option.  This option is automatically disabled if UseLogin is\par
             enabled.\par
\par
     no-port-forwarding\par
             Forbids TCP/IP forwarding when this key is used for authentication.  Any port forward requests\par
             by the client will return an error.  This might be used, e.g., in connection with the command\par
             option.\par
\par
     no-X11-forwarding\par
             Forbids X11 forwarding when this key is used for authentication.  Any X11 forward requests by\par
             the client will return an error.\par
\par
     no-agent-forwarding\par
             Forbids authentication agent forwarding when this key is used for authentication.\par
\par
     no-pty  Prevents tty allocation (a request to allocate a pty will fail).\par
\par
     permitopen="host:port"\par
             Limit local ``ssh -L'' port forwarding such that it may only connect to the specified host and\par
             port.  IPv6 addresses can be specified with an alternative syntax: host/port.  Multiple\par
             permitopen options may be applied separated by commas.  No pattern matching is performed on the\par
             specified hostnames, they must be literal domains or addresses.\par
\par
   Examples\par
     1024 33 12121...312314325 ylo@foo.bar\par
\par
     from="*.niksula.hut.fi,!pc.niksula.hut.fi" 1024 35 23...2334 ylo@niksula\par
\par
     command="dump /home",no-pty,no-port-forwarding 1024 33 23...2323 backup.hut.fi\par
\par
     permitopen="10.2.1.55:80",permitopen="10.2.1.56:25" 1024 33 23...2323\par
\par
SSH_KNOWN_HOSTS FILE FORMAT\par
     The /etc/ssh_known_hosts and $HOME/.ssh/known_hosts files contain host public keys for all known hosts.\par
     The global file should be prepared by the administrator (optional), and the per-user file is maintained\par
     automatically: whenever the user connects from an unknown host its key is added to the per-user file.\par
\par
     Each line in these files contains the following fields: hostnames, bits, exponent, modulus, comment.\par
     The fields are separated by spaces.\par
\par
     Hostnames is a comma-separated list of patterns (`*' and `?' act as wildcards); each pattern in turn is\par
     matched against the canonical host name (when authenticating a client) or against the user-supplied\par
     name (when authenticating a server).  A pattern may also be preceded by `!' to indicate negation: if\par
     the host name matches a negated pattern, it is not accepted (by that line) even if it matched another\par
     pattern on the line.\par
\par
     Alternately, hostnames may be stored in a hashed form which hides host names and addresses should the\par
     file's contents be disclosed.  Hashed hostnames start with a `|' character.  Only one hashed hostname\par
     may appear on a single line and none of the above negation or wildcard operators may be applied.\par
\par
     Bits, exponent, and modulus are taken directly from the RSA host key; they can be obtained, e.g., from\par
     /etc/ssh_host_key.pub.  The optional comment field continues to the end of the line, and is not used.\par
\par
     Lines starting with `#' and empty lines are ignored as comments.\par
\par
     When performing host authentication, authentication is accepted if any matching line has the proper\par
     key.  It is thus permissible (but not recommended) to have several lines or different host keys for the\par
     same names.  This will inevitably happen when short forms of host names from different domains are put\par
     in the file.  It is possible that the files contain conflicting information; authentication is accepted\par
     if valid information can be found from either file.\par
\par
     Note that the lines in these files are typically hundreds of characters long, and you definitely don't\par
     want to type in the host keys by hand.  Rather, generate them by a script or by taking\par
     /etc/ssh_host_key.pub and adding the host names at the front.\par
\par
   Examples\par
     closenet,...,130.233.208.41 1024 37 159...93 closenet.hut.fi\par
     cvs.openbsd.org,199.185.137.3 ssh-rsa AAAA1234.....=\par
\par
     # A hashed hostname\par
     |1|JfKTdBh7rNbXkVAQCRp4OQoPfmI=|USECr3SWf1JUPsms5AqfD5QfxkM= ssh-rsa\par
     AAAA1234.....=\par
\par
FILES\par
     /etc/sshd_config\par
             Contains configuration data for sshd.  The file format and configuration options are described\par
             in sshd_config(5).\par
\par
     /etc/ssh_host_key, /etc/ssh_host_dsa_key, /etc/ssh_host_rsa_key\par
             These three files contain the private parts of the host keys.  These files should only be owned\par
             by root, readable only by root, and not accessible to others.  Note that sshd does not start if\par
             this file is group/world-accessible.\par
\par
     /etc/ssh_host_key.pub, /etc/ssh_host_dsa_key.pub, /etc/ssh_host_rsa_key.pub\par
             These three files contain the public parts of the host keys.  These files should be world-read-\par
             able but writable only by root.  Their contents should match the respective private parts.\par
             These files are not really used for anything; they are provided for the convenience of the user\par
             so their contents can be copied to known hosts files.  These files are created using\par
             ssh-keygen(1).\par
    /etc/moduli\par
            Contains Diffie-Hellman groups used for the "Diffie-Hellman Group Exchange".  The file format\par
            is described in moduli(5).\par
\par
    /var/empty\par
            chroot(2) directory used by sshd during privilege separation in the pre-authentication phase.\par
            The directory should not contain any files and must be owned by root and not group or world-\par
            writable.\par
\par
    /var/run/sshd.pid\par
            Contains the process ID of the sshd listening for connections (if there are several daemons\par
            running concurrently for different ports, this contains the process ID of the one started\par
            last).  The content of this file is not sensitive; it can be world-readable.\par
\par
    $HOME/.ssh/authorized_keys\par
            Lists the public keys (RSA or DSA) that can be used to log into the user's account.  This file\par
            must be readable by root (which may on some machines imply it being world-readable if the\par
            user's home directory resides on an NFS volume).  It is recommended that it not be accessible\par
            by others.  The format of this file is described above.  Users will place the contents of their\par
            identity.pub, id_dsa.pub and/or id_rsa.pub files into this file, as described in ssh-keygen(1).\par
\par
    /etc/ssh_known_hosts, $HOME/.ssh/known_hosts\par
            These files are consulted when using rhosts with RSA host authentication or protocol version 2\par
            hostbased authentication to check the public key of the host.  The key must be listed in one of\par
            these files to be accepted.  The client uses the same files to verify that it is connecting to\par
            the correct remote host.  These files should be writable only by root/the owner.\par
            /etc/ssh_known_hosts should be world-readable, and $HOME/.ssh/known_hosts can, but need not be,\par
            world-readable.\par
\par
    /etc/motd\par
            See motd(5).\par
\par
    $HOME/.hushlogin\par
            This file is used to suppress printing the last login time and /etc/motd, if PrintLastLog and\par
            PrintMotd, respectively, are enabled.  It does not suppress printing of the banner specified by\par
            Banner.\par
\par
    /etc/nologin\par
            If this file exists, sshd refuses to let anyone except root log in.  The contents of the file\par
            are displayed to anyone trying to log in, and non-root connections are refused.  The file\par
            should be world-readable.\par
\par
    /etc/hosts.allow, /etc/hosts.deny\par
            Access controls that should be enforced by tcp-wrappers are defined here.  Further details are\par
            described in hosts_access(5).\par
   $HOME/.rhosts\par
           This file is used during RhostsRSAAuthentication and HostbasedAuthentication and contains host-\par
           username pairs, separated by a space, one per line.  The given user on the corresponding host\par
           is permitted to log in without a password.  The same file is used by rlogind and rshd.  The\par
           file must be writable only by the user; it is recommended that it not be accessible by others.\par
\par
           It is also possible to use netgroups in the file.  Either host or user name may be of the form\par
           +@groupname to specify all hosts or all users in the group.\par
\par
   $HOME/.shosts\par
           For ssh, this file is exactly the same as for .rhosts.  However, this file is not used by\par
           rlogin and rshd, so using this permits access using SSH only.\par
\par
   /etc/hosts.equiv\par
           This file is used during RhostsRSAAuthentication and HostbasedAuthentication authentication.\par
           In the simplest form, this file contains host names, one per line.  Users on those hosts are\par
           permitted to log in without a password, provided they have the same user name on both machines.\par
           The host name may also be followed by a user name; such users are permitted to log in as any\par
           user on this machine (except root).  Additionally, the syntax ``+@group'' can be used to spec-\par
           ify netgroups.  Negated entries start with `-'.\par
\par
           If the client host/user is successfully matched in this file, login is automatically permitted\par
           provided the client and server user names are the same.  Additionally, successful client host\par
           key authentication is required.  This file must be writable only by root; it is recommended\par
           that it be world-readable.\par
\par
           Warning: It is almost never a good idea to use user names in hosts.equiv.  Beware that it\par
           really means that the named user(s) can log in as anybody, which includes bin, daemon, adm, and\par
           other accounts that own critical binaries and directories.  Using a user name practically\par
           grants the user root access.  The only valid use for user names that I can think of is in nega-\par
           tive entries.\par
\par
           Note that this warning also applies to rsh/rlogin.\par
\par
   /etc/shosts.equiv\par
           This is processed exactly as /etc/hosts.equiv.  However, this file may be useful in environ-\par
           ments that want to run both rsh/rlogin and ssh.\par
\par
   $HOME/.ssh/environment\par
           This file is read into the environment at login (if it exists).  It can only contain empty\par
           lines, comment lines (that start with `#'), and assignment lines of the form name=value.  The\par
           file should be writable only by the user; it need not be readable by anyone else.  Environment\par
           processing is disabled by default and is controlled via the PermitUserEnvironment option.\par
\par
   $HOME/.ssh/rc\par
           If this file exists, it is run with /bin/sh after reading the environment files but before\par
             starting the user's shell or command.  It must not produce any output on stdout; stderr must be\par
             used instead.  If X11 forwarding is in use, it will receive the "proto cookie" pair in its\par
             standard input (and DISPLAY in its environment).  The script must call xauth(1) because sshd\par
             will not run xauth automatically to add X11 cookies.\par
\par
             The primary purpose of this file is to run any initialization routines which may be needed\par
             before the user's home directory becomes accessible; AFS is a particular example of such an\par
             environment.\par
\par
             This file will probably contain some initialization code followed by something similar to:\par
\par
             if read proto cookie && [ -n "$DISPLAY" ]; then\par
                     if [ `echo $DISPLAY | cut -c1-10` = 'localhost:' ]; then\par
                             # X11UseLocalhost=yes\par
                             echo add unix:`echo $DISPLAY |\par
                                 cut -c11-` $proto $cookie\par
                     else\par
                             # X11UseLocalhost=no\par
                             echo add $DISPLAY $proto $cookie\par
                     fi | xauth -q -\par
             fi\par
\par
             If this file does not exist, /etc/ssh/sshrc is run, and if that does not exist either, xauth is\par
             used to add the cookie.\par
\par
             This file should be writable only by the user, and need not be readable by anyone else.\par
\par
     /etc/ssh/sshrc\par
             Like $HOME/.ssh/rc.  This can be used to specify machine-specific login-time initializations\par
             globally.  This file should be writable only by root, and should be world-readable.\par
\par
SEE ALSO\par
     scp(1), sftp(1), ssh(1), ssh-add(1), ssh-agent(1), ssh-keygen(1), chroot(2), hosts_access(5),\par
     login.conf(5), moduli(5), sshd_config(5), inetd(8), sftp-server(8)\par
\par
     T. Ylonen, T. Kivinen, M. Saarinen, T. Rinne, and S. Lehtinen, SSH Protocol Architecture, draft-ietf-\par
     secsh-architecture-12.txt, January 2002, work in progress material.\par
\par
     M. Friedl, N. Provos, and W. A. Simpson, Diffie-Hellman Group Exchange for the SSH Transport Layer\par
     Protocol, draft-ietf-secsh-dh-group-exchange-02.txt, January 2002, work in progress material.\par
\par
AUTHORS\par
     OpenSSH is a derivative of the original and free ssh 1.2.12 release by Tatu Ylonen.  Aaron Campbell,\par
     Bob Beck, Markus Friedl, Niels Provos, Theo de Raadt and Dug Song removed many bugs, re-added newer\par
     features and created OpenSSH.  Markus Friedl contributed the support for SSH protocol versions 1.5 and\par
     2.0.  Niels Provos and Markus Friedl contributed support for privilege separation.\par
\par
BSD                           September 25, 1999                           BSD\par
(END)\par
}
 