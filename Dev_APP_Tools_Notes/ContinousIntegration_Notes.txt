****************************************************
******* Jenkins Installation Mac OSX ***************
****************************************************

** Important configuration note:
        Glassfish requires the use of port 8080.  This conflicts with Jenkin.  I know how to change Jenkins at this time but not Glassfish.
        So Jenkins is going to run on port 8090.
    

Links: 
http://jenkins-ci.org
http://mirrors.jenkins-ci.org/osx/latest

1) Down Load
2) Install Package
	- selected Allow All Connections to access service
		This should allow access by other computers
3) http://localhost:8080
	- Apache still works on port 80 http://localhost:80
4) http://localhost:8080/manage 
	- Url to Jenkins Management

Jenkins control:
https://wiki.jenkins-ci.org/display/JENKINS/Starting+and+Accessing+Jenkins
http://stackoverflow.com/questions/26483089/launchd-is-not-starting-jenkins-server-on-os-x-yosemite

Starting Jenkins Mac OSX and changing port

    1. chown jenkins /var/log/jenkins/jenkins.log
        C1246895-Air:Jenkins rduvalwa2$ sudo defaults write /Library/Preferences/org.jenkins-ci httpPort 9090
        Password:
    2. C1246895-Air:Jenkins rduvalwa2$ sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist
    3. C1246895-Air:Jenkins rduvalwa2$ sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist
    4. C1246895-Air:Jenkins rduvalwa2$ launchctl start /Library/LaunchDaemons/org.jenkins-ci.plist
    5. C1246895-Air:Jenkins rduvalwa2$ ps -ef | grep jenkins
       247 33608     1   0  3:26PM ??         0:18.62 /usr/bin/java -Dfile.encoding=UTF-8 -XX:PermSize=256m -XX:MaxPermSize=512m -Xms256m -Xmx512m -Djava.io.tmpdir=/Users/Shared/Jenkins/tmp -jar /Applications/Jenkins/jenkins.war --httpPort=9090
       503 33631 26031   0  3:27PM ttys000    0:00.00 grep jenkins
    6. C1246895-Air:Jenkins rduvalwa2$ pwd
        /Applications/Jenkins
    	** Starting Jenkins **************************************
** On April 28 2015 **************************************
  
        552  sudo chown jenkins /var/log/jenkins/jenkins.log  
        553  ls  /var/log/jenkins/jenkins.log
        554  ls -l  /var/log/jenkins/jenkins.log  
        555  sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist
        556  sudo defaults write /Library/Preferences/org.jenkins-ci httpPort 9090  
        557  sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist  
        558  launchctl start /Library/LaunchDaemons/org.jenkins-ci.plist
        559  ps -ef | grep jenkins
        ** Accessing running Jenkins **********
http://localhost:8080/

****************************************************
******* Travis CI                    ***************
****************************************************

Getting started
Travis CI Overview #
Travis CI is a hosted continuous integration service. It is integrated with GitHub and offers first class support for:
* C * C++ * Clojure * C# * D* Dart* Erlang* F#* Go* Groovy* Haskell* Java* JavaScript (with Node.js)* Julia
* Objective-C* Perl* PHP* Python* Ruby* Rust* Scala* Visual Basic

Step 1: Sign in #
	To get started with Travis CI, sign in with your GitHub account. Go to Travis CI and 
	follow the Sign In link at the top.
	Note that on https://travis-ci.org, you'll currently only see your public repositories, 
	whereas on https://travis-ci.com, you can find your private projects.
	While signing in, GitHub will ask you for a set of access permissions on our behalf. 
	We've outlined them and their use in more detail.

Step 2: Activate GitHub Webhook #
	Once you're signed in, and we've initially synchronized your repositories from GitHub, 
	go to your profile page for open source or for your private projects.
	You'll see all the organizations you're a member of and all the repositories you have access to.
	The ones you have administrative access to are the ones you can enable the service hook for.
	** Flip switch to on for all repositories you'd like to enable.

Step 3: Add .travis.yml file to your repository #
	In order for Travis CI to build your project, you need to tell the system a little bit about it.
	You'll need to add a file named .travis.yml to the root of your repository.
	We will only cover basic .travis.yml options in this guide. The most important one is 
	the language key. It tells Travis CI which language environment to select for your project.
	If .travis.yml is not in the repository, is misspelled or is not valid YAML, 
	Travis CI will ignore it, assume Ruby as the language and use default values for everything.
	Note #
	The language value is case-sensitive. If you set language: C, for example, your project will be
	considered a Ruby project.

	Validate Your .travis.yml #
	recommend you use travis-lint (command-line tool) or .travis.yml validation
	Web app to validate your .travis.yml file.

	http://lint.travis-ci.org/

Step 4: Trigger Your First Build With a Git Push #
	Once GitHub hook is set up, push your commit that adds .travis.yml to your repository. 
	That should add a build into one of the queues on Travis CI and your build will start as
	soon as one worker for your language is available.
	To start a build, perform one of the following:
	1. Commit and push something to your repository
	2. Go to your repository's settings page, click on "Webhooks & Services" on the left menu, 
	choose "Travis CI" in the "Services", and use the "Test service" button.
	Please note that you cannot trigger your first build using Test Hook button. It has to be 
	triggered by a push to your repository.

Step 5: Tweaking your build configuration #
	Chances are, your project requires some customization to the build process. Maybe you need to
	create a database before running your tests or you use build tools different from what 
	Travis CI's defaults are. Worry not. Travis CI lets you override almost everything.
	Learn how to customize your build or how to install dependencies for your project.
	After making some changes to the .travis.yml, don't forget to check that it is valid YAML 
	and run travis-lint to validate it.

Step 6: Learn more #
	A Travis CI worker comes with a good number of services you might depend on, including MySQL,
	PostgreSQL, MongoDB, Redis, CouchDB, RabbitMQ, memcached and others.
	See Database setup to learn how to configure a database connection for your test suite. 
	More information about our test environment can be found in a separate guide.

Step 7: We are here to help! #
	For any kind of questions feel free to join our IRC channel #travis on chat.freenode.net. 
	We're there to help :)

**********************************
*** Integration with Saucelab ****
**********************************

	https://docs.saucelabs.com/ci-integrations/travis-ci/


	Tutorial setup to run automated tests on Travis CI using browsers and platforms available
	on Sauce Labs
	1) First, create a .travis.yml file
	2) Adding credentials for a public GitHub repo
	   For public GitHub repos we can automatically encrypt your credentials
	   (for private GitHub repositories follow the steps below)
	  a) Add to .travis.yml
	    env:
	      global:
	        - secure: “Secure username token”  (for GitHub rduvalwa5)
		- secure: “Secure Access key”  (for GitHub Red1Dawg)
	  b) if no .travis.yml in repository(I don’t know where this would be done
		- travis init
	  c)
		C1246895-Air:sauce-project rduvalwa2$ mvn archetype:generate -DgroupId=com.saucelabs -DartifactId=sauce-project -Dversion=1.0.0-SNAPSHOT -DinteractiveMode=false -DarchetypeRepository=http://repository-saucelabs.forge.cloudbees.com/release -DarchetypeGroupId=com.saucelabs -DarchetypeArtifactId=quickstart-webdriver-junit -DarchetypeVersion=2.1.11 -DsauceUserName=rduvalwa5 -DsauceAccessKey=81187483-1bfd-4635-87a6-7b90546396c9

		C1246895-Air:sauce-project rduvalwa2$ pwd
		/Users/rduvalwa2/Desktop/sauce-project

		C1246895-Air:sauce-project rduvalwa2$ ls -ltr
		total 8
		-rw-r--r--  1 rduvalwa2  staff  2391 Feb 25 11:11 pom.xml
		drwxr-xr-x  4 rduvalwa2  staff   136 Feb 25 11:50 src
		drwxr-xr-x  6 rduvalwa2  staff   204 Feb 25 11:56 target
		C1246895-Air:sauce-project rduvalwa2$ 
		https://saucelabs.com/tests

	  d) C1246895-Air:sauce-project rduvalwa2$ mvn test
	-------------------------------------------------------
	 T E S T S
	-------------------------------------------------------
	Running com.saucelabs.SampleSauceTest
	Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 25.718 sec

	Results :

	Tests run: 2, Failures: 0, Errors: 0, Skipped: 0

	[INFO] ------------------------------------------------------------------------
	[INFO] BUILD SUCCESS
	[INFO] ------------------------------------------------------------------------
	[INFO] Total time: 01:23 min
	[INFO] Finished at: 2015-02-25T11:56:21-08:00
	[INFO] Final Memory: 19M/81M
	[INFO] ------------------------------------------------------------------------

	e) add to source test
	